"""–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Gemini API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"""
import logging
from typing import Optional, Dict, Any
import google.generativeai as genai
from config import GOOGLE_API_KEY

logger = logging.getLogger(__name__)

class GeminiService:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini API"""

    def __init__(self, api_key: str):
        if not api_key:
            raise ValueError("GOOGLE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        genai.configure(api_key=api_key)

        # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–π –º–æ–¥–µ–ª—å—é
        models_to_try = ['gemini-2.5-flash', 'gemini-pro', 'gemini-pro-vision']

        self.model = None
        for model_name in models_to_try:
            try:
                self.model = genai.GenerativeModel(model_name)
                logger.info(f"Gemini API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é: {model_name}")
                break
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å {model_name}: {e}")
                continue

        if self.model is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É –º–æ–¥–µ–ª—å Gemini")

    def generate_explanation(self, prompt: str, max_tokens: int = 500) -> Optional[str]:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Gemini

        Args:
            prompt (str): –ó–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤

        Returns:
            Optional[str]: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_config = genai.types.GenerationConfig(
                max_output_tokens=max_tokens,
                temperature=0.7,
                top_p=0.8,
                top_k=40
            )

            response = self.model.generate_content(
                prompt,
                generation_config=generation_config
            )

            if response and response.text:
                return response.text.strip()
            else:
                logger.warning("Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Gemini API: {e}")
            return None

    def explain_word(self, word: str, context: str = "") -> Optional[str]:
        """
        –û–±—ä—è—Å–Ω–∏—Ç—å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ —Å–ª–æ–≤–æ

        Args:
            word (str): –°–ª–æ–≤–æ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
            context (str): –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã

        Returns:
            Optional[str]: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞
        """
        prompt = f"""
        –û–±—ä—è—Å–Ω–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ —Å–ª–æ–≤–æ "{word}" –ø—Ä–æ—Å—Ç—ã–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º.
        –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –∏–∑ —Ä—É—Å—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã XIX-XX –≤–µ–∫–æ–≤, —É–∫–∞–∂–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.

        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        üìù [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ]

        üëâ [–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–Ω–∏–º –∏–ª–∏ –∞–Ω–∞–ª–æ–≥]

        üìñ [–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ]

        üåç [–ö—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ]

        –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
        """

        if context:
            prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"

        return self.generate_explanation(prompt)

    def explain_phrase(self, phrase: str) -> Optional[str]:
        """
        –û–±—ä—è—Å–Ω–∏—Ç—å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—É—é —Ñ—Ä–∞–∑—É –∏–ª–∏ —Ü–∏—Ç–∞—Ç—É

        Args:
            phrase (str): –§—Ä–∞–∑–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è

        Returns:
            Optional[str]: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã
        """
        prompt = f'''
        –û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–π —Ñ—Ä–∞–∑—ã –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: "{phrase}"

        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
        üìñ –ó–Ω–∞—á–µ–Ω–∏–µ: [–ø—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã]

        üîç –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: [–∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å —Ç–æ –∂–µ —Å–∞–º–æ–µ —Å–µ–≥–æ–¥–Ω—è]

        üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç: [–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –∏ –≥–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å]

        üìù –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: [–æ—Ç–∫—É–¥–∞ –ø–æ—à–ª–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ]

        –ë—É–¥—å —Ç–æ—á–µ–Ω –∏ –æ—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö —Ä—É—Å—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –∏ —è–∑—ã–∫–∞.
        '''

        return self.generate_explanation(prompt)

    def retell_text(self, text: str, target_audience: str = "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å") -> Optional[str]:
        """
        –ü–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º

        Args:
            text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            target_audience (str): –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è

        Returns:
            Optional[str]: –ü–µ—Ä–µ—Å–∫–∞–∑ —Ç–µ–∫—Å—Ç–∞
        """
        prompt = f"""
        –ü–µ—Ä–µ—Å–∫–∞–∂–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Å—Ç—ã–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º –¥–ª—è {target_audience}.

        –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
        "{text}"

        –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
        - –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        - –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–µ–∫—Å–∏–∫—É –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π
        - –°–æ–∫—Ä–∞—Ç–∏ –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        - –£–¥–∞–ª–∏ –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        - –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ 2-3 —Ä–∞–∑–∞ –∫–æ—Ä–æ—á–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞

        –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑:
        """

        return self.generate_explanation(prompt)

    def generate_quiz_questions(self, topic: str, count: int = 3) -> Optional[list]:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã

        Args:
            topic (str): –¢–µ–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
            count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤

        Returns:
            Optional[list]: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        """
        prompt = f'''
        –°–æ–∑–¥–∞–π {count} –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ —Ç–µ–º–µ "{topic}" –∏–∑ —Ä—É—Å—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.

        –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω:
        1. –ë—ã—Ç—å —Å–≤—è–∑–∞–Ω —Å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è–º–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞–º–∏
        2. –ò–º–µ—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        3. –°–æ–¥–µ—Ä–∂–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

        –§–æ—Ä–º–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:
        –í–û–ü–†–û–°: [—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞]
        A) [–≤–∞—Ä–∏–∞–Ω—Ç 1]
        B) [–≤–∞—Ä–∏–∞–Ω—Ç 2]
        C) [–≤–∞—Ä–∏–∞–Ω—Ç 3]
        D) [–≤–∞—Ä–∏–∞–Ω—Ç 4]
        –ü–†–ê–í–ò–õ–¨–ù–´–ô: [–±—É–∫–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞]
        –û–ë–™–Ø–°–ù–ï–ù–ò–ï: [–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]

        '''

        response = self.generate_explanation(prompt, max_tokens=1000)

        if response:
            return self._parse_quiz_questions(response)
        return None

    def _parse_quiz_questions(self, response: str) -> list:
        """
        –†–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç API —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã

        Args:
            response (str): –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç API

        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        """
        questions = []
        sections = response.split('–í–û–ü–†–û–°:')

        for section in sections[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —á–∞—Å—Ç—å
            try:
                lines = section.strip().split('\n')
                question_text = lines[0].strip()

                options = []
                correct_answer = ""
                explanation = ""

                for line in lines[1:]:
                    line = line.strip()
                    if line.startswith(('A)', 'B)', 'C)', 'D)')):
                        options.append(line[3:].strip())
                    elif line.startswith('–ü–†–ê–í–ò–õ–¨–ù–´–ô:'):
                        correct_letter = line.split(':')[1].strip()
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—É–∫–≤—É –≤ –∏–Ω–¥–µ–∫—Å
                        letter_to_index = {'A': 0, 'a': 0, 'B': 1, 'b': 1,
                                         'C': 2, 'c': 2, 'D': 3, 'd': 3}
                        correct_answer = letter_to_index.get(correct_letter, 0)
                    elif line.startswith('–û–ë–™–Ø–°–ù–ï–ù–ò–ï:'):
                        explanation = line.split(':', 1)[1].strip()

                if len(options) == 4:
                    questions.append({
                        'question': question_text,
                        'options': options,
                        'correct_index': correct_answer,
                        'explanation': explanation
                    })

            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
                continue

        return questions

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Gemini API...")
try:
    gemini_service = GeminiService(GOOGLE_API_KEY)
    logger.info("Gemini API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ")
except ValueError as e:
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Gemini API: {e}")
    logger.error(f"GOOGLE_API_KEY –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {bool(GOOGLE_API_KEY)}")
    gemini_service = None
    logger.warning("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
except Exception as e:
    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")
    gemini_service = None

def generate_word_explanation(word: str, context: str = "") -> Optional[str]:
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    if gemini_service:
        return gemini_service.explain_word(word, context)
    return None

def generate_phrase_explanation(phrase: str) -> Optional[str]:
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã"""
    if gemini_service:
        return gemini_service.explain_phrase(phrase)
    return None

def generate_text_retelling(text: str) -> Optional[str]:
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    if gemini_service:
        return gemini_service.retell_text(text)
    return None

def generate_quiz_questions(topic: str = "—Ä—É—Å—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", count: int = 3) -> Optional[list]:
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    if gemini_service:
        return gemini_service.generate_quiz_questions(topic, count)
    return None
