const https = require('https');
const fs = require('fs');

// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
let API_KEY = null;
let MODEL = 'deepseek/deepseek-chat-v3.1:free';

try {
  const envContent = fs.readFileSync('.env', 'utf8');
  const lines = envContent.split('\n');

  lines.forEach(line => {
    const trimmed = line.trim();
    if (trimmed.startsWith('OPENROUTER_API_KEY=')) {
      API_KEY = trimmed.split('=')[1];
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω OPENROUTER_API_KEY –≤ .env —Ñ–∞–π–ª–µ');
    }
  });
} catch (e) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞:', e.message);
}

if (!API_KEY) {
  console.log('‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  console.log('üìù –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É: OPENROUTER_API_KEY=–≤–∞—à_–∫–ª—é—á_—Å—é–¥–∞');
  process.exit(1);
}

const postData = JSON.stringify({
  model: MODEL,
  messages: [{
    role: 'user',
    content: '–ü—Ä–∏–≤–µ—Ç! –û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ "–∞–Ω–∞–ª–æ–≥–∏—è" –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.'
  }],
  max_tokens: 100
});

const options = {
  hostname: 'openrouter.ai',
  port: 443,
  path: '/api/v1/chat/completions',
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${API_KEY}`,
    'Content-Type': 'application/json',
    'HTTP-Referer': 'https://github.com/andrewchernish1-ui/som_lit_bot',
    'X-Title': 'Literary Assistant Bot',
    'Content-Length': Buffer.byteLength(postData)
  }
};

console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π API –∫–ª—é—á –∏–∑ .env —Ñ–∞–π–ª–∞...');
console.log(`ü§ñ –ú–æ–¥–µ–ª—å: ${MODEL}`);
console.log('üí¨ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–∞–Ω–∞–ª–æ–≥–∏—è"\n');

const req = https.request(options, (res) => {
  console.log(`üìä –°—Ç–∞—Ç—É—Å –∫–æ–¥: ${res.statusCode}`);

  let data = '';
  res.on('data', (chunk) => {
    data += chunk;
  });

  res.on('end', () => {
    if (res.statusCode === 200) {
      try {
        const response = JSON.parse(data);
        console.log('‚úÖ –£–°–ü–ï–•! –ù–æ–≤—ã–π API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        console.log(`ü§ñ –û—Ç–≤–µ—Ç –æ—Ç DeepSeek: ${response.choices[0].message.content.substring(0, 200)}...`);
        console.log('\nüéâ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!');
      } catch (e) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e.message);
      }
    } else {
      console.log('‚ùå –û–®–ò–ë–ö–ê —Å –Ω–æ–≤—ã–º API –∫–ª—é—á–æ–º!');
      console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);

      if (res.statusCode === 401) {
        console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('  ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ Open Router');
        console.log('  ‚Ä¢ –ö–ª—é—á —Å–Ω–æ–≤–∞ –ø–æ–ø–∞–ª –≤ –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø');
        console.log('  ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º Open Router');
      }
    }
  });
});

req.on('error', (e) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', e.message);
});

req.write(postData);
req.end();
