#!/usr/bin/env python3
"""–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""

import sys
import os

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã"""
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        from config import validate_config, TELEGRAM_BOT_TOKEN, GOOGLE_API_KEY
        print("‚úÖ config.py - OK")

        from literary_data import get_word_definition, get_phrase_explanation
        print("‚úÖ literary_data.py - OK")

        from database import DatabaseManager, save_word, get_user_dictionary
        print("‚úÖ database.py - OK")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini (—Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º)
        try:
            from gemini_service import generate_word_explanation
            print("‚úÖ gemini_service.py - OK (—Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º)")
        except Exception as e:
            print(f"‚ö†Ô∏è gemini_service.py - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π: {e}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        from handlers.start_handler import start
        print("‚úÖ handlers/start_handler.py - OK")

        from keyboards import get_main_menu_keyboard
        print("‚úÖ keyboards.py - OK")

        from handlers.word_handler import explain_word
        print("‚úÖ handlers/word_handler.py - OK")

        from handlers.phrase_handler import explain_phrase
        print("‚úÖ handlers/phrase_handler.py - OK")

        from handlers.retell_handler import retell_text
        print("‚úÖ handlers/retell_handler.py - OK")

        from handlers.dictionary_handler import show_dictionary
        print("‚úÖ handlers/dictionary_handler.py - OK")

        from handlers.quiz_handler import start_quiz
        print("‚úÖ handlers/quiz_handler.py - OK")

        print("\nüéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        return True

    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        from database import DatabaseManager

        db = DatabaseManager()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞
        test_user_id = 999999
        result = db.save_word(test_user_id, "–∏—Å–ø—Ä–∞–≤–Ω–∏–∫", "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ")
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞: {'OK' if result else 'FAILED'}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
        words = db.get_user_dictionary(test_user_id, limit=5)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è: {len(words)} —Å–ª–æ–≤")

        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        db.clear_user_dictionary(test_user_id)
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")

    imports_ok = test_imports()
    db_ok = test_database()

    if imports_ok and db_ok:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py")
        print("‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ .env —Ñ–∞–π–ª–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏")
    else:
        print("\n‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
        sys.exit(1)

if __name__ == "__main__":
    main()
