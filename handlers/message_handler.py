"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
from telegram import Update
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
USER_STATES = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
STATE_NONE = 0
STATE_WAITING_WORD = 1
STATE_WAITING_PHRASE = 2
STATE_WAITING_RETELL = 3
STATE_WAITING_CHARACTER = 4

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = USER_STATES.get(user_id, STATE_NONE)

    try:
        if current_state == STATE_NONE:
            await handle_menu_selection(update, context, text)
        elif current_state == STATE_WAITING_WORD:
            await handle_word_request(update, context, text)
        elif current_state == STATE_WAITING_PHRASE:
            await handle_phrase_request(update, context, text)
        elif current_state == STATE_WAITING_RETELL:
            await handle_retell_request(update, context, text)
        elif current_state == STATE_WAITING_CHARACTER:
            await handle_character_request(update, context, text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = update.effective_user.id

    if text.startswith("1Ô∏è‚É£") or text == "/—Å–ª–æ–≤–æ":
        USER_STATES[user_id] = STATE_WAITING_WORD
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å:"
        )

    elif text.startswith("2Ô∏è‚É£") or text == "/–æ–±—ä—è—Å–Ω–∏":
        USER_STATES[user_id] = STATE_WAITING_PHRASE
        await update.message.reply_text(
            "üìñ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ—Ä–∞–∑—É, –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ –∏–ª–∏ –∏–º—è –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:"
        )

    elif text.startswith("3Ô∏è‚É£") or text == "/–ø–µ—Ä–µ—Å–∫–∞–∂–∏":
        USER_STATES[user_id] = STATE_WAITING_RETELL
        await update.message.reply_text(
            "üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:"
        )

    elif text.startswith("4Ô∏è‚É£") or text == "/—Ö–∞—Ä–∞–∫—Ç–µ—Ä":
        USER_STATES[user_id] = STATE_WAITING_CHARACTER
        await update.message.reply_text(
            "üé≠ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≥–µ—Ä–æ—è, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–±–ª–æ–º–æ–≤, –ì–æ–Ω—á–∞—Ä–æ–≤ \"–û–±–ª–æ–º–æ–≤\"):"
        )

    else:
        from keyboards import get_main_menu_keyboard
        await update.message.reply_text(
            "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/—Å–ª–æ–≤–æ - –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ\n"
            "/–æ–±—ä—è—Å–Ω–∏ - —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—É\n"
            "/–ø–µ—Ä–µ—Å–∫–∞–∂–∏ - –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç\n"
            "/—Ö–∞—Ä–∞–∫—Ç–µ—Ä - —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –≥–µ—Ä–æ—è",
            reply_markup=get_main_menu_keyboard()
        )

async def handle_word_request(update: Update, context: ContextTypes.DEFAULT_TYPE, word: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    user_id = update.effective_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    USER_STATES[user_id] = STATE_NONE

    try:
        from handlers.word_handler import explain_word
        await explain_word(update, context, word.lower())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ '{word}': {e}")
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ '{word}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ."
        )

async def handle_phrase_request(update: Update, context: ContextTypes.DEFAULT_TYPE, phrase: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã"""
    user_id = update.effective_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    USER_STATES[user_id] = STATE_NONE

    try:
        from handlers.phrase_handler import explain_phrase
        await explain_phrase(update, context, phrase)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã '{phrase[:50]}...': {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ."
        )

async def handle_retell_request(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    user_id = update.effective_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    USER_STATES[user_id] = STATE_NONE

    try:
        from handlers.retell_handler import retell_text
        await retell_text(update, context, text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç."
        )

async def handle_character_request(update: Update, context: ContextTypes.DEFAULT_TYPE, character_info: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è"""
    user_id = update.effective_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    USER_STATES[user_id] = STATE_NONE

    try:
        from handlers.character_handler import characterize_hero
        await characterize_hero(update, context, character_info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ –≥–µ—Ä–æ—è '{character_info[:50]}...': {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –≥–µ—Ä–æ—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ."
        )
