"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
from telegram import Update
from telegram.ext import ContextTypes
import logging
import random
from keyboards import get_quiz_keyboard
from database import get_user_dictionary
from openrouter_service import generate_quiz_questions
from literary_data import get_literary_terms

logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω (user_id -> –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)
active_quizzes = {}

def generate_personalized_quiz_question(user_id: int):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        tuple: (question, options, correct_index) –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_words = get_user_dictionary(user_id, limit=20)

    if len(user_words) >= 3:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∏—Ö
        return generate_quiz_from_user_words(user_words)
    else:
        # –ï—Å–ª–∏ –º–∞–ª–æ —Å–ª–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã
        return generate_literary_quiz_question()

def generate_quiz_from_user_words(user_words):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user_words (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        tuple: (question, options, correct_index) –∏–ª–∏ None
    """
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        random_word = random.choice(user_words)
        correct_definition = random_word['explanation'][:100]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è

        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        other_words = [w for w in user_words if w != random_word]
        wrong_options = []

        for _ in range(3):
            if other_words:
                wrong_word = random.choice(other_words)
                wrong_options.append(wrong_word['explanation'][:100])
                other_words.remove(wrong_word)
            else:
                # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
                wrong_options.append("–û–±—â–µ–µ –ø–æ–Ω—è—Ç–∏–µ –∏–∑ —Ä—É—Å—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã")

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        all_options = wrong_options + [correct_definition]
        random.shuffle(all_options)
        correct_index = all_options.index(correct_definition)

        question = f"–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ª–æ–≤–æ '{random_word['word']}'?"

        return question, all_options, correct_index

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤: {e}")
        return None

def generate_literary_quiz_question():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã

    Returns:
        tuple: (question, options, correct_index) –∏–ª–∏ None
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        literary_terms = get_literary_terms()

        if not literary_terms:
            # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            return get_fallback_quiz_question()

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Ä–º–∏–Ω
        term = random.choice(literary_terms)
        correct_definition = term['definition'][:100]

        # –°–æ–∑–¥–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        other_terms = [t for t in literary_terms if t != term]
        wrong_options = []

        for _ in range(3):
            if other_terms:
                wrong_term = random.choice(other_terms)
                wrong_options.append(wrong_term['definition'][:100])
                other_terms.remove(wrong_term)
            else:
                wrong_options.append("–û–±—â–µ–µ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ")

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        all_options = wrong_options + [correct_definition]
        random.shuffle(all_options)
        correct_index = all_options.index(correct_definition)

        question = f"–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–µ—Ä–º–∏–Ω '{term['term']}' –≤ —Ä—É—Å—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ?"

        return question, all_options, correct_index

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        return get_fallback_quiz_question()

def get_fallback_quiz_question():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    questions = [
        {
            "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ª–æ–≤–æ '–∏—Å–ø—Ä–∞–≤–Ω–∏–∫'?",
            "correct": "–ù–∞—á–∞–ª—å–Ω–∏–∫ —É–µ–∑–¥–Ω–æ–π –ø–æ–ª–∏—Ü–∏–∏ –≤ –†–æ—Å—Å–∏–π—Å–∫–æ–π –∏–º–ø–µ—Ä–∏–∏",
            "wrong": ["–î—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –º–æ–Ω–∞—Ö–æ–≤", "–°—Ç–∞—Ä–æ—Å—Ç–∞ –¥–µ—Ä–µ–≤–Ω–∏", "–í–æ–µ–Ω–Ω—ã–π —á–∏–Ω"]
        },
        {
            "question": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ '–∫ —à–∞–ø–æ—á–Ω–æ–º—É —Ä–∞–∑–±–æ—Ä—É'?",
            "correct": "–í –∫–æ–Ω—Ü–µ, –ø–æ–¥ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü —Å–æ–±—ã—Ç–∏—è",
            "wrong": ["–ö –Ω–∞—á–∞–ª—É —Å–æ–±—Ä–∞–Ω–∏—è", "–í —Ä–∞–∑–≥–∞—Ä —Å–ø–æ—Ä–∞", "–í–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–æ–≤"]
        },
        {
            "question": "–ö—Ç–æ —Ç–∞–∫–æ–π '—Å—Ç–∞—Ä–µ—Ü –ó–æ—Å–∏–º–∞'?",
            "correct": "–î—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤ '–ë—Ä–∞—Ç—å—è—Ö –ö–∞—Ä–∞–º–∞–∑–æ–≤—ã—Ö' –î–æ—Å—Ç–æ–µ–≤—Å–∫–æ–≥–æ",
            "wrong": ["–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π '–í–æ–π–Ω—ã –∏ –º–∏—Ä–∞'", "–ê–Ω—Ç–∞–≥–æ–Ω–∏—Å—Ç '–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è'", "–ë–∏–±–ª–µ–π—Å–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂"]
        }
    ]

    q = random.choice(questions)

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    options = q["wrong"] + [q["correct"]]
    random.shuffle(options)
    correct_index = options.index(q["correct"])

    return q["question"], options, correct_index

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id

    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        user_words = get_user_dictionary(user_id, limit=20)
        logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Å–ª–æ–≤–∞—Ä–µ {len(user_words)} —Å–ª–æ–≤")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        quiz_data = generate_personalized_quiz_question(user_id)

        if quiz_data:
            question, options, correct_index = quiz_data
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            question, options, correct_index = get_fallback_quiz_question()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        active_quizzes[user_id] = correct_index
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –∏–Ω–¥–µ–∫—Å {correct_index}")

        keyboard = get_quiz_keyboard(question, options, correct_index)

        await update.message.reply_text(
            f"‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞!\n\n{question}",
            reply_markup=keyboard
        )

        logger.info(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    callback_data = query.data

    if not callback_data.startswith("quiz_"):
        return

    try:
        # –ü–∞—Ä—Å–∏–º callback_data: quiz_{selected_index}_{correct_index}
        parts = callback_data.split("_")
        selected_index = int(parts[1])
        correct_index = int(parts[2])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if selected_index == correct_index:
            result_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü! üéâ"
        else:
            result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –≤–∞—Ä–∏–∞–Ω—Ç {correct_index + 1}"

        # –û—á–∏—â–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in active_quizzes:
            del active_quizzes[user_id]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await query.edit_message_text(
            f"{query.message.text}\n\n{result_text}\n\n–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? –ù–∞–∂–º–∏ üé≤ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤ –º–µ–Ω—é!"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞."
        )
