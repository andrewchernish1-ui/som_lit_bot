"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
from telegram import Update
from telegram.ext import ContextTypes
import logging
from keyboards import get_quiz_keyboard

logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω (user_id -> –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)
active_quizzes = {}

def get_sample_quiz_question():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    questions = [
        {
            "question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ª–æ–≤–æ '–∏—Å–ø—Ä–∞–≤–Ω–∏–∫'?",
            "correct": "–ù–∞—á–∞–ª—å–Ω–∏–∫ —É–µ–∑–¥–Ω–æ–π –ø–æ–ª–∏—Ü–∏–∏ –≤ –†–æ—Å—Å–∏–π—Å–∫–æ–π –∏–º–ø–µ—Ä–∏–∏",
            "wrong": ["–î—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –º–æ–Ω–∞—Ö–æ–≤", "–°—Ç–∞—Ä–æ—Å—Ç–∞ –¥–µ—Ä–µ–≤–Ω–∏", "–í–æ–µ–Ω–Ω—ã–π —á–∏–Ω"]
        },
        {
            "question": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ '–∫ —à–∞–ø–æ—á–Ω–æ–º—É —Ä–∞–∑–±–æ—Ä—É'?",
            "correct": "–í –∫–æ–Ω—Ü–µ, –ø–æ–¥ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü —Å–æ–±—ã—Ç–∏—è",
            "wrong": ["–ö –Ω–∞—á–∞–ª—É —Å–æ–±—Ä–∞–Ω–∏—è", "–í —Ä–∞–∑–≥–∞—Ä —Å–ø–æ—Ä–∞", "–í–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–æ–≤"]
        },
        {
            "question": "–ö—Ç–æ —Ç–∞–∫–æ–π '—Å—Ç–∞—Ä–µ—Ü –ó–æ—Å–∏–º–∞'?",
            "correct": "–î—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤ '–ë—Ä–∞—Ç—å—è—Ö –ö–∞—Ä–∞–º–∞–∑–æ–≤—ã—Ö' –î–æ—Å—Ç–æ–µ–≤—Å–∫–æ–≥–æ",
            "wrong": ["–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π '–í–æ–π–Ω—ã –∏ –º–∏—Ä–∞'", "–ê–Ω—Ç–∞–≥–æ–Ω–∏—Å—Ç '–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è'", "–ë–∏–±–ª–µ–π—Å–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂"]
        }
    ]

    import random
    q = random.choice(questions)

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    options = q["wrong"] + [q["correct"]]
    random.shuffle(options)
    correct_index = options.index(q["correct"])

    return q["question"], options, correct_index

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id

    try:
        question, options, correct_index = get_sample_quiz_question()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        active_quizzes[user_id] = correct_index

        keyboard = get_quiz_keyboard(question, options, correct_index)

        await update.message.reply_text(
            f"‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞!\n\n{question}",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    callback_data = query.data

    if not callback_data.startswith("quiz_"):
        return

    try:
        # –ü–∞—Ä—Å–∏–º callback_data: quiz_{selected_index}_{correct_index}
        parts = callback_data.split("_")
        selected_index = int(parts[1])
        correct_index = int(parts[2])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if selected_index == correct_index:
            result_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü! üéâ"
        else:
            result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –≤–∞—Ä–∏–∞–Ω—Ç {correct_index + 1}"

        # –û—á–∏—â–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in active_quizzes:
            del active_quizzes[user_id]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await query.edit_message_text(
            f"{query.message.text}\n\n{result_text}\n\n–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? –ù–∞–∂–º–∏ üé≤ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –≤ –º–µ–Ω—é!"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞."
        )
