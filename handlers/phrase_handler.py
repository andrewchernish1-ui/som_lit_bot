"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∑ –∏ —Ü–∏—Ç–∞—Ç"""
from telegram import Update
from telegram.ext import ContextTypes
import logging
from literary_data import get_phrase_explanation
from llm_service import generate_phrase_explanation, initialize_llm_service

logger = logging.getLogger(__name__)

async def explain_phrase(update: Update, context: ContextTypes.DEFAULT_TYPE, phrase: str) -> None:
    """
    –û–±—ä—è—Å–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É –∏–ª–∏ —Ü–∏—Ç–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        phrase (str): –§—Ä–∞–∑–∞ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –±–∞–∑–µ
        phrase_data = get_phrase_explanation(phrase)

        if phrase_data:
            # –§—Ä–∞–∑–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –±–∞–∑–µ
            response = format_phrase_response(phrase_data)
        else:
            # –§—Ä–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM API
            logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –æ–±—ä—è—Å–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É —á–µ—Ä–µ–∑ LLM API: '{phrase[:50]}...'")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–±–æ—Ç –¥—É–º–∞–µ—Ç"
            processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM —Å–µ—Ä–≤–∏—Å
            if not initialize_llm_service():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LLM —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã")
                await update.message.reply_text(
                    "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return

            explanation = generate_phrase_explanation(phrase)

            if explanation:
                logger.info(f"LLM API —É—Å–ø–µ—à–Ω–æ –æ–±—ä—è—Å–Ω–∏–ª —Ñ—Ä–∞–∑—É (–¥–ª–∏–Ω–∞: {len(explanation)} —Å–∏–º–≤–æ–ª–æ–≤)")
                response = f"üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã:\n\n{explanation}"
            else:
                logger.warning(f"LLM API –Ω–µ —Å–º–æ–≥ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É: '{phrase[:50]}...'")
                response = (
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –æ–±—ä—è—Å–Ω–∏—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É.\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–ª–∏ —É –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /—Å–ª–æ–≤–æ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤."
                )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–±–æ—Ç –¥—É–º–∞–µ—Ç" –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if 'processing_msg' in locals():
            try:
                await processing_msg.delete()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–±–æ—Ç –¥—É–º–∞–µ—Ç': {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ - Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 4096 —Å–∏–º–≤–æ–ª–∞–º–∏
        max_length = 4000  # –î–∞–µ–º –∑–∞–ø–∞—Å

        if len(response) > max_length:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            response = response[:max_length-100] + "\n\n... [–û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram]"

        await update.message.reply_text(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã '{phrase[:50]}...': {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ."
        )

def format_phrase_response(phrase_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ—Ä–∞–∑—ã

    Args:
        phrase_data (dict): –î–∞–Ω–Ω—ã–µ –æ —Ñ—Ä–∞–∑–µ

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    """
    response = f"üé≠ {phrase_data['explanation']}"

    if phrase_data.get('modern_paraphrase'):
        response += f"\n\n–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n{phrase_data['modern_paraphrase']}"

    if phrase_data.get('cultural_context'):
        response += f"\n\n–ö—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\n{phrase_data['cultural_context']}"

    return response
