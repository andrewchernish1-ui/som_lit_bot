"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–≤"""
from telegram import Update
from telegram.ext import ContextTypes
import logging
from literary_data import get_word_definition, format_word_response
from openrouter_service import generate_word_explanation
from database import save_word

logger = logging.getLogger(__name__)

async def explain_word(update: Update, context: ContextTypes.DEFAULT_TYPE, word: str) -> None:
    """
    –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        word (str): –°–ª–æ–≤–æ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    """
    user_id = update.effective_user.id

    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞: '{word}'")

        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenRouter API (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '{word}' —á–µ—Ä–µ–∑ OpenRouter API")
        explanation = generate_word_explanation(word)

        if explanation:
            # API —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
            logger.info(f"OpenRouter API —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '{word}' (–¥–ª–∏–Ω–∞: {len(explanation)} —Å–∏–º–≤–æ–ª–æ–≤)")
            response = f"ü§ñ –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è:\n\n{explanation}"
        else:
            # API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –±–∞–∑—É –∫–∞–∫ fallback
            logger.warning(f"OpenRouter API –Ω–µ —Å–º–æ–≥ –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ '{word}', –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –±–∞–∑—É")
            word_data = get_word_definition(word)

            if word_data:
                logger.info(f"–°–ª–æ–≤–æ '{word}' –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                response = format_word_response(word_data)
                explanation = word_data['definition']
            else:
                # –ù–∏ API, –Ω–∏ –±–∞–∑–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ '{word}' –Ω–∏ —á–µ—Ä–µ–∑ API, –Ω–∏ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                response = (
                    f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ '{word}'.\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –æ–ø–µ—á–∞—Ç–∫–∞ –∏–ª–∏ –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ–µ —Å–ª–æ–≤–æ. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–æ–±—ä—è—Å–Ω–∏ –¥–ª—è —Ñ—Ä–∞–∑."
                )
                await update.message.reply_text(response)
                return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è —Å–ª–æ–≤–∞ '{word}'")
        await update.message.reply_text(response)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —É–¥–∞–ª–æ—Å—å)
        if explanation:
            logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ '{word}' –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            save_word(user_id, word, explanation)

        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '{word}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ '{word}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ '{word}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
