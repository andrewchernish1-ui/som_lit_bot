"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
from telegram import Update
from telegram.ext import ContextTypes
import logging
from database import get_user_dictionary, clear_user_dictionary
from keyboards import get_dictionary_actions_keyboard

logger = logging.getLogger(__name__)

async def show_dictionary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        words = get_user_dictionary(user_id, limit=20)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–ª–æ–≤

        if not words:
            response = (
                "üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø–æ–∫–∞ –ø—É—Å—Ç!\n\n"
                "–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É:\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—Å–ª–æ–≤–æ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤\n"
                "‚Ä¢ –ö–∞–∂–¥—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            )
            await update.message.reply_text(response)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤
        response_lines = ["üìö –í–æ—Ç —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–µ–¥–∞–≤–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏:"]

        for i, word_data in enumerate(words, 1):
            word = word_data['word']
            count = word_data['lookup_count']
            last_lookup = word_data['last_lookup'][:10]  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞

            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è)
            short_explanation = word_data['explanation'][:50]
            if len(word_data['explanation']) > 50:
                short_explanation += "..."

            response_lines.append(
                f"{i}. {word} ({count} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, {last_lookup})\n"
                f"   ‚îî {short_explanation}"
            )

        response = "\n".join(response_lines)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö
        total_words = len(words)
        response += f"\n\nüìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {total_words}"

        if total_words > 20:
            response += f"\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω–æ 20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–ª–æ–≤ –∏–∑ {total_words}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        await update.message.reply_text(
            response,
            reply_markup=get_dictionary_actions_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def export_dictionary_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –≤ PDF

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id

    try:
        import reportlab.pdfgen.canvas as canvas
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        import io

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        words = get_user_dictionary(user_id, limit=1000)

        if not words:
            await update.callback_query.message.reply_text(
                "üì≠ –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å."
            )
            return

        # –°–æ–∑–¥–∞–µ–º PDF
        buffer = io.BytesIO()
        c = canvas.Canvas(buffer)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä—É—Å—Å–∫–∏–π —à—Ä–∏—Ñ—Ç)
        try:
            c.setFont("Helvetica", 16)
        except:
            pass

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        c.drawString(50, 800, "–õ–∏—á–Ω—ã–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å")
        c.drawString(50, 780, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")
        c.drawString(50, 760, f"–í—Å–µ–≥–æ —Å–ª–æ–≤: {len(words)}")

        # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤
        y_position = 720
        for i, word_data in enumerate(words, 1):
            if y_position < 50:  # –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                c.showPage()
                c.setFont("Helvetica", 12)
                y_position = 800

            word_line = f"{i}. {word_data['word']} ({word_data['lookup_count']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)"
            c.drawString(50, y_position, word_line)

            # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫
            explanation = word_data['explanation']
            words_list = explanation.split()
            line = ""
            y_position -= 20

            for w in words_list:
                if c.stringWidth(line + " " + w, "Helvetica", 10) < 500:
                    line += " " + w if line else w
                else:
                    c.setFont("Helvetica", 10)
                    c.drawString(70, y_position, line)
                    line = w
                    y_position -= 15
                    if y_position < 50:
                        break

            if line and y_position >= 50:
                c.drawString(70, y_position, line)
                y_position -= 25

        c.save()
        buffer.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        await update.callback_query.message.reply_document(
            document=buffer,
            filename="literary_dictionary.pdf",
            caption="üìÑ –í–∞—à –ª–∏—á–Ω—ã–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ"
        )

    except ImportError:
        await update.callback_query.message.reply_text(
            "‚ùå –ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ PDF –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.callback_query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF —Ñ–∞–π–ª–∞."
        )

async def export_dictionary_csv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –≤ CSV

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id

    try:
        from database import DatabaseManager
        db = DatabaseManager()
        csv_content = db.export_user_dictionary_csv(user_id)

        if csv_content == "–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç":
            await update.callback_query.message.reply_text(
                "üì≠ –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å."
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        import io
        csv_buffer = io.BytesIO(csv_content.encode('utf-8'))

        await update.callback_query.message.reply_document(
            document=csv_buffer,
            filename="literary_dictionary.csv",
            caption="üìä –í–∞—à –ª–∏—á–Ω—ã–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.callback_query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞."
        )

async def clear_user_dict(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    """
    user_id = update.effective_user.id

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_text = (
            "‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å?\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
            "–í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞."
        )

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º
        success = clear_user_dictionary(user_id)

        if success:
            await update.callback_query.message.reply_text(
                "üóëÔ∏è –°–ª–æ–≤–∞—Ä—å –æ—á–∏—â–µ–Ω!\n\n"
                "–í—Å–µ —Å–ª–æ–≤–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –∑–∞–Ω–æ–≤–æ! üìö"
            )
        else:
            await update.callback_query.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await update.callback_query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ª–æ–≤–∞—Ä—è."
        )
