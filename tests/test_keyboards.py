"""–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞"""
import pytest
from telegram import InlineKeyboardButton


@pytest.mark.unit
class TestKeyboards:
    """–¢–µ—Å—Ç—ã –º–æ–¥—É–ª—è keyboards.py"""

    def test_get_main_menu_keyboard(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        from keyboards import get_main_menu_keyboard

        keyboard = get_main_menu_keyboard()

        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        assert keyboard is not None
        assert hasattr(keyboard, 'keyboard')
        assert len(keyboard.keyboard) == 4  # 4 –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é

        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        expected_texts = [
            "1Ô∏è‚É£ –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ",
            "2Ô∏è‚É£ –†–∞–∑–æ–±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—É/–∞–±–∑–∞—Ü",
            "3Ô∏è‚É£ –ü–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º",
            "4Ô∏è‚É£ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –≥–µ—Ä–æ—è"
        ]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ KeyboardButton –æ–±—ä–µ–∫—Ç–æ–≤
        actual_texts = [row[0].text for row in keyboard.keyboard]
        assert actual_texts == expected_texts

    def test_get_response_actions_keyboard_simple(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é"""
        from keyboards import get_response_actions_keyboard

        keyboard = get_response_actions_keyboard()

        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
        assert keyboard is not None
        assert hasattr(keyboard, 'inline_keyboard')
        assert len(keyboard.inline_keyboard) == 1  # –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
        assert len(keyboard.inline_keyboard[0]) == 1  # –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞

        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        button = keyboard.inline_keyboard[0][0]
        assert button.text == "üìã –ú–µ–Ω—é"
        assert button.callback_data == "show_menu"

    def test_get_response_actions_keyboard_with_word(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Å–ª–æ–≤–∞"""
        from keyboards import get_response_actions_keyboard

        keyboard = get_response_actions_keyboard(word="–º–µ—Ç–∞—Ñ–æ—Ä–∞")

        # –í—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é
        assert len(keyboard.inline_keyboard) == 1
        assert len(keyboard.inline_keyboard[0]) == 1

        button = keyboard.inline_keyboard[0][0]
        assert button.text == "üìã –ú–µ–Ω—é"
        assert button.callback_data == "show_menu"

    def test_quiz_keyboard_generation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        from keyboards import get_quiz_keyboard

        question = "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ—Ç–∞—Ñ–æ—Ä–∞?"
        options = ["–ü–µ—Ä–µ–Ω–æ—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "–ü—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "–†–∏—Ñ–º–∞"]
        correct_index = 0

        keyboard = get_quiz_keyboard(question, options, correct_index)

        # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
        assert len(keyboard.inline_keyboard) == len(options)

        # –ü—Ä–æ–≤–µ—Ä–∏–º callback_data
        for i, row in enumerate(keyboard.inline_keyboard):
            assert len(row) == 1  # –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ
            button = row[0]
            assert button.text == options[i]
            # callback_data –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω–¥–µ–∫—Å –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            assert f"quiz_{i}_{correct_index}" in button.callback_data

    def test_popular_terms_keyboard(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏"""
        from keyboards import get_popular_terms_keyboard

        keyboard = get_popular_terms_keyboard()

        # –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert keyboard is not None
        assert hasattr(keyboard, 'inline_keyboard')
        assert len(keyboard.inline_keyboard) > 0

        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ—Ä–º–∏–Ω–∞–º–∏
        all_buttons = []
        for row in keyboard.inline_keyboard:
            all_buttons.extend(row)

        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–µ—Ä–º–∏–Ω—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        button_texts = [btn.text for btn in all_buttons]
        assert "–º–µ—Ç–∞—Ñ–æ—Ä–∞" in button_texts
        assert "–º–µ—Ç–æ–Ω–∏–º–∏—è" in button_texts
        assert "üìñ –î—Ä—É–≥–∏–µ —Ç–µ—Ä–º–∏–Ω—ã" in button_texts
