"""–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
import pytest
from unittest.mock import patch, MagicMock


@pytest.mark.unit
class TestMessageHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è message_handler.py"""

    @pytest.mark.asyncio
    async def test_handle_menu_selection_word(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é - –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞"""
        from handlers.message_handler import handle_menu_selection

        mock_update.message.text = "1Ô∏è‚É£ –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ"

        # –û—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        from handlers.message_handler import USER_STATES
        USER_STATES.clear()

        await handle_menu_selection(mock_update, mock_context, mock_update.message.text)

        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        assert USER_STATES[mock_update.effective_user.id] == 1  # STATE_WAITING_WORD

        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        mock_update.message.reply_text.assert_called_with("üìù –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å:")

    @pytest.mark.asyncio
    async def test_handle_menu_selection_phrase(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é - —Ä–∞–∑–±–æ—Ä —Ñ—Ä–∞–∑—ã"""
        from handlers.message_handler import handle_menu_selection

        mock_update.message.text = "2Ô∏è‚É£ –†–∞–∑–æ–±—Ä–∞—Ç—å —Ñ—Ä–∞–∑—É/–∞–±–∑–∞—Ü"

        from handlers.message_handler import USER_STATES
        USER_STATES.clear()

        await handle_menu_selection(mock_update, mock_context, mock_update.message.text)

        assert USER_STATES[mock_update.effective_user.id] == 2  # STATE_WAITING_PHRASE
        mock_update.message.reply_text.assert_called_with("üìñ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ—Ä–∞–∑—É, –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ –∏–ª–∏ –∏–º—è –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:")

    @pytest.mark.asyncio
    async def test_handle_menu_selection_retell(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é - –ø–µ—Ä–µ—Å–∫–∞–∑ —Ç–µ–∫—Å—Ç–∞"""
        from handlers.message_handler import handle_menu_selection

        mock_update.message.text = "3Ô∏è‚É£ –ü–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º"

        from handlers.message_handler import USER_STATES
        USER_STATES.clear()

        await handle_menu_selection(mock_update, mock_context, mock_update.message.text)

        assert USER_STATES[mock_update.effective_user.id] == 3  # STATE_WAITING_RETELL
        mock_update.message.reply_text.assert_called_with("üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:")

    @pytest.mark.asyncio
    async def test_handle_menu_selection_character(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é - —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –≥–µ—Ä–æ—è"""
        from handlers.message_handler import handle_menu_selection

        mock_update.message.text = "4Ô∏è‚É£ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –≥–µ—Ä–æ—è"

        from handlers.message_handler import USER_STATES
        USER_STATES.clear()

        await handle_menu_selection(mock_update, mock_context, mock_update.message.text)

        assert USER_STATES[mock_update.effective_user.id] == 4  # STATE_WAITING_CHARACTER
        mock_update.message.reply_text.assert_called_with("üé≠ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≥–µ—Ä–æ—è, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–±–ª–æ–º–æ–≤, –ì–æ–Ω—á–∞—Ä–æ–≤ \"–û–±–ª–æ–º–æ–≤\"):")

    @pytest.mark.asyncio
    async def test_handle_menu_selection_unknown(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é"""
        from handlers.message_handler import handle_menu_selection

        mock_update.message.text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"

        await handle_menu_selection(mock_update, mock_context, mock_update.message.text)

        # –î–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        mock_update.message.reply_text.assert_called_once()
        call_args = mock_update.message.reply_text.call_args
        assert "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é" in call_args[0][0]
        # –ò –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        assert 'reply_markup' in call_args[1]


@pytest.mark.unit
class TestCallbackHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è callback_handler.py"""

    def test_show_menu_callback(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞ show_menu"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ mock –¥–ª—è callback_query
        callback_query = MagicMock()
        callback_query.data = "show_menu"
        mock_update.callback_query = callback_query

        from handlers.callback_handler import handle_callback

        handle_callback(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        callback_query.answer.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        mock_update.callback_query.message.reply_text.assert_called_once_with(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=mock_context.call_args  # –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        )

    def test_unknown_callback(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–ª–±—ç–∫–∞"""
        callback_query = MagicMock()
        callback_query.data = "unknown_command"
        mock_update.callback_query = callback_query

        from handlers.callback_handler import handle_callback

        handle_callback(mock_update, mock_context)

        # –í—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
        callback_query.answer.assert_called_once()
        mock_update.callback_query.message.reply_text.assert_called_once()


@pytest.mark.unit
class TestStartHandler:
    """–¢–µ—Å—Ç—ã –¥–ª—è start_handler.py"""

    def test_start_command(self, mock_update, mock_context):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start"""
        from handlers.start_handler import start

        start(mock_update, mock_context)

        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        mock_update.message.reply_html.assert_called_once()
        call_args = mock_update.message.reply_html.call_args
        assert "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫" in call_args[0][0]
        assert "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å" in call_args[0][0].lower() or "–ø—Ä–∏–≤–µ—Ç" in call_args[0][0].lower()

        # –ò —á—Ç–æ –µ—Å—Ç—å reply_markup (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é)
        assert 'reply_markup' in call_args[1]


@pytest.mark.unit
class TestStateManagement:
    """–¢–µ—Å—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def test_user_states_persistence(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        from handlers.message_handler import USER_STATES, STATE_WAITING_WORD, STATE_NONE

        # –û—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        USER_STATES.clear()

        # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_id = 12345
        USER_STATES[user_id] = STATE_WAITING_WORD

        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        assert USER_STATES[user_id] == STATE_WAITING_WORD

        # –°–º–µ–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        USER_STATES[user_id] = STATE_NONE
        assert USER_STATES[user_id] == STATE_NONE

        # –û—á–∏—Å—Ç–∏–º
        USER_STATES.clear()
        assert len(USER_STATES) == 0
